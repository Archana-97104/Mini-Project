package MiniProject;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.time.Duration;

public class GrafanaTest {
	
	private WebDriver driver;
	private XSSFWorkbook workbook;
    private XSSFSheet sheet;
	 private String excelFilePath = "./data/Mysheet.xlsx";
	 
	 
	@BeforeMethod
	public void setUp() throws IOException {
		driver = new ChromeDriver();
		// to maximize window
		driver.manage().window().maximize();
		
		 FileInputStream fis = new FileInputStream("./data/Mysheet.xlsx");
	        workbook = new XSSFWorkbook(fis);
	         sheet = workbook.getSheetAt(0);
	}
	

	@Test(dataProvider = "DropdownData", dataProviderClass = ExcelReader.class)
	public void runGrafana(String envInput, String regionInput, String queryInput, String sessionInput)
			throws IOException {
		// to open chrome

		
		// to open url
		driver.get("https://d3q7rt0kr5fynf.cloudfront.net/ad-tools/mediatailor-logs-query-builder.html");
		// to select dropdown
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement dropdown1 = driver.findElement(By.id("envInput"));
		Select option1 = new Select(dropdown1);
		option1.selectByVisibleText(envInput);
		WebElement dropdown2 = driver.findElement(By.id("regionInput"));
		Select option2 = new Select(dropdown2);
		option2.selectByVisibleText(regionInput);
		WebElement dropdown3 = driver.findElement(By.id("queryInput"));
		Select option3 = new Select(dropdown3);
		option3.selectByVisibleText(queryInput);
		driver.findElement(By.id("sessionInput")).sendKeys(sessionInput);
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		//String ptitle = driver.getTitle();
		//System.out.println(ptitle);
		String pwindowHandle = driver.getWindowHandle();
		driver.findElement(By.id("button-mt")).click();
		Set<String> windowHandles = driver.getWindowHandles();
		List<String> allWindows = new ArrayList<String>(windowHandles);
		driver.switchTo().window(allWindows.get(1));
		//System.out.println("Child window title: " + driver.getTitle());
		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		//WebElement element = wait1.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='css-1ueg5w']//span[1]")));
		driver.findElement(By.xpath("//span[@class='css-1ueg5w']//span[1]")).click();
		driver.findElement(By.xpath("//label[text()='Last 6 hours']")).click();
		driver.findElement(By.xpath("//button[@class= 'css-5se5b3 css-1wx8bl8-positionRelative']")).click();
		String resultText = driver.findElement(By.xpath("//button[@class= 'css-5se5b3 css-1wx8bl8-positionRelative']"))
				.getText();
		System.out.println("Result text: " + resultText);
		
		 int rowNum = findRowByTestCase(sheet, envInput, regionInput, queryInput, sessionInput);
		 
		 
		  if (rowNum == -1) {
		        throw new IllegalStateException("Test case not found in the Excel sheet.");
		    }
		  XSSFRow row = sheet.getRow(rowNum);
		    if (row == null) {
		        row = sheet.createRow(rowNum); // Create a new row if it doesn't exist
		    }
		    
		int currentRow = sheet.getLastRowNum() + 1;
        XSSFRow row1 = sheet.createRow(currentRow);
        row1.createCell(1).setCellValue(envInput);
        row1.createCell(2).setCellValue(regionInput);
        row1.createCell(3).setCellValue(queryInput);
        row1.createCell(4).setCellValue(sessionInput);
        row1.createCell(5).setCellValue(resultText); 
        if (sheet == null) {
            throw new IllegalStateException("Sheet not found in Excel file.");
        }
	}
        private int findRowByTestCase(XSSFSheet sheet, String envInput, String regionInput, String queryInput, String sessionInput) {
            for (int i = 1; i <= sheet.getLastRowNum(); i++) { // Starting from 1 to skip header row
                XSSFRow row = sheet.getRow(i);
                if (row != null) {
                    String env = row.getCell(1).getStringCellValue();
                    String region = row.getCell(2).getStringCellValue();
                    String query = row.getCell(3).getStringCellValue();
                    String session = row.getCell(4).getStringCellValue();
                    if (env.equals(envInput) && region.equals(regionInput) && query.equals(queryInput) && session.equals(sessionInput)) {
                        return i; // Return the row number if a match is found
                    }
                }
            }
            return -1; // Return -1 if no matching row is found
	}

	@AfterMethod
	public void tearDown() throws InterruptedException, IOException {
		// Close driver and restore console output
		FileOutputStream fos = new FileOutputStream(excelFilePath);
        workbook.write(fos);
        fos.close();
        workbook.close();
       
	}
}
